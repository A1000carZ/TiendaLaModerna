@page "/productos"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using TiendaLaModerna.Components.Models.Catalogo
@using TiendaLaModerna.Data
@implements IAsyncDisposable
@inject IDbContextFactory<TiendaLaModerna.Data.TiendaLaModernaContext> DbFactory

<PageTitle>Productos</PageTitle>

<h1>Productos</h1>

<p>
    <a href="productos/create">Create New</a>
</p>

@if (productos != null)
{
    <QuickGrid Class="table" Items="productos.AsQueryable()">
        <PropertyColumn Property="producto => producto.Name" Title="Nombre" />
        <PropertyColumn Property="producto => producto.Categoria != null ? producto.Categoria.nombre : string.Empty" Title="Categoría" />
        <PropertyColumn Property="producto => producto.Precio" Title="Precio" Format="C" />
        <PropertyColumn Property="producto => producto.CostoPromedio" Title="Costo Promedio" Format="C" />
        <PropertyColumn Property="producto => producto.Promocion" Title="Promoción" />
        <PropertyColumn Property="producto => producto.Agotado" Title="Agotado" />
        <PropertyColumn Property="producto => GetStockStatus(producto)" Title="Stock"/>
        <TemplateColumn Context="producto" Title="Acciones">
            <a href="@($"productos/edit?id={producto.Id}")">Edit</a> |
            <a href="@($"productos/details?id={producto.Id}")">Details</a> |
            <a href="@($"productos/delete?id={producto.Id}")">Delete</a>
        </TemplateColumn>
    </QuickGrid>
}
else
{
    <p>Loading...</p>
}

@code {
    private List<Producto>? productos;

    private string GetStockStatus(Producto producto)
    {
        if (producto.Stock == null)
        {
            return "desconocido";
        }
        return producto.Stock.CantidadDisponible.ToString();
    }
    protected override async Task OnInitializedAsync()
    {
        
        using var context = DbFactory.CreateDbContext();

      
        productos = await context.Producto
            .Include(p => p.Categoria)
            .Include(p => p.Stock)
            .ToListAsync();
    }

    public ValueTask DisposeAsync() => ValueTask.CompletedTask;
}