@page "/productos/edit"
@using Microsoft.EntityFrameworkCore
@using TiendaLaModerna.Components.Models.Catalogo
@inject IDbContextFactory<TiendaLaModerna.Data.TiendaLaModernaContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Producto</h2>
<hr />
@if (Producto is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Producto" OnValidSubmit="UpdateProducto" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Producto.Id" value="@Producto.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Producto.Name" class="form-control" />
                    <ValidationMessage For="() => Producto.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="categoriaid" class="form-label">CategoriaId:</label>
                    <InputNumber id="categoriaid" @bind-Value="Producto.CategoriaId" class="form-control" />
                    <ValidationMessage For="() => Producto.CategoriaId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="precio" class="form-label">Precio:</label>
                    <InputNumber id="precio" @bind-Value="Producto.Precio" class="form-control" />
                    <ValidationMessage For="() => Producto.Precio" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="costopromedio" class="form-label">CostoPromedio:</label>
                    <InputNumber id="costopromedio" @bind-Value="Producto.CostoPromedio" class="form-control" />
                    <ValidationMessage For="() => Producto.CostoPromedio" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="img" class="form-label">Img:</label>
                    <InputText id="img" @bind-Value="Producto.Img" class="form-control" />
                    <ValidationMessage For="() => Producto.Img" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="promocion" class="form-label">Promocion:</label>
                    <InputCheckbox id="promocion" @bind-Value="Producto.Promocion" class="form-check-input" />
                    <ValidationMessage For="() => Producto.Promocion" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="agotado" class="form-label">Agotado:</label>
                    <InputCheckbox id="agotado" @bind-Value="Producto.Agotado" class="form-check-input" />
                    <ValidationMessage For="() => Producto.Agotado" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="umbralinventario" class="form-label">UmbralInventario:</label>
                    <InputNumber id="umbralinventario" @bind-Value="Producto.UmbralInventario" class="form-control" />
                    <ValidationMessage For="() => Producto.UmbralInventario" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="requierevencimiento" class="form-label">RequiereVencimiento:</label>
                    <InputCheckbox id="requierevencimiento" @bind-Value="Producto.RequiereVencimiento" class="form-check-input" />
                    <ValidationMessage For="() => Producto.RequiereVencimiento" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="activo" class="form-label">Activo:</label>
                    <InputCheckbox id="activo" @bind-Value="Producto.Activo" class="form-check-input" />
                    <ValidationMessage For="() => Producto.Activo" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="fechacreacion" class="form-label">FechaCreacion:</label>
                    <InputDate id="fechacreacion" @bind-Value="Producto.FechaCreacion" class="form-control" />
                    <ValidationMessage For="() => Producto.FechaCreacion" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/productos">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Producto? Producto { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Producto ??= await context.Producto.FirstOrDefaultAsync(m => m.Id == Id);

        if (Producto is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateProducto()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Producto!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProductoExists(Producto!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/productos");
    }

    private bool ProductoExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Producto.Any(e => e.Id == id);
    }
}
