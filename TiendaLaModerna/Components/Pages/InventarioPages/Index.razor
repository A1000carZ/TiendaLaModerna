@page "/inventario"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using TiendaLaModerna.Components.Models.Catalogo
@using TiendaLaModerna.Data
@implements IAsyncDisposable
@inject IDbContextFactory<TiendaLaModerna.Data.TiendaLaModernaContext> DbFactory
@inject NavigationManager NavigationManager
<PageTitle>Inventario</PageTitle>

<div class="min-h-screen bg-gray-50 p-6">
    
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 mb-6">
        <div class="px-6 py-4 border-b border-gray-200">
            <div class="flex items-center justify-between">
                <div class="flex items-center space-x-3">
                    <div class="flex items-center space-x-2">
                        <svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                        </svg>
                        <h1 class="text-xl font-semibold text-gray-900">Inventario</h1>
                    </div>
                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
                        @(productos?.Count ?? 0) productos
                    </span>
                </div>
                <div class="flex items-center space-x-3">
                    <button @onclick="GoToHistory" class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        Historial
                    </button>
                    <button @onclick="GoToCreateMovement" class="inline-flex items-center px-3 py-2 border border-transparent text-sm leading-4 font-medium rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-orange-500">
                        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6" />
                        </svg>
                        Movimiento
                    </button>
                </div>
            </div>
        </div>

   
        <div class="px-6 py-4">
            <div class="flex flex-col sm:flex-row gap-4">
                <div class="flex-1">
                    <div class="relative">
                        <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                            <svg class="h-5 w-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                            </svg>
                        </div>
                        <input @bind="searchTerm" @oninput="OnSearchChanged" type="text" class="block w-full pl-10 pr-3 py-2 border border-gray-300 rounded-md leading-5 bg-white placeholder-gray-500 focus:outline-none focus:placeholder-gray-400 focus:ring-1 focus:ring-blue-500 focus:border-blue-500 sm:text-sm" placeholder="Buscar productos...">
                    </div>
                </div>
                <div class="flex gap-2">
                    <select @bind="selectedCategory" @bind:after="OnFilterChanged" class="block px-3 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                        <option value="">Todas las categorías</option>
                        @if (categorias != null)
                        {
                            @foreach (var categoria in categorias)
                            {
                                <option value="@categoria">@categoria</option>
                            }
                        }
                    </select>
                    <select @bind="selectedStockLevel" @bind:after="OnFilterChanged" class="block px-3 py-2 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                        <option value="">Todos los niveles</option>
                        <option value="low">Stock bajo</option>
                        <option value="high">Stock alto</option>
                        <option value="out">Sin stock</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

  
    <div class="bg-white rounded-lg shadow-sm border border-gray-200 overflow-hidden">
        @if (filteredProductos != null)
        {
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Producto</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Categoría</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock Actual</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Stock Reservado</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Lotes Activos</th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Acciones</th>
                        </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                        @foreach (var producto in filteredProductos)
                        {
                            <tr class="hover:bg-gray-50 transition-colors duration-150">
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <div class="flex-shrink-0 h-10 w-10">
                                            <svg class="w-5 h-5 text-blue-600" fill="currentColor" viewBox="0 0 18 20">
                                                <path d="M17 5.923A1 1 0 0 0 16 5h-3V4a4 4 0 1 0-8 0v1H2a1 1 0 0 0-1 .923L.086 17.846A2 2 0 0 0 2.08 20h13.84a2 2 0 0 0 1.994-2.153L17 5.923ZM7 9a1 1 0 0 1-2 0V7h2v2Zm0-5a2 2 0 1 1 4 0v1H7V4Zm6 5a1 1 0 1 1-2 0V7h2v2Z" />
                                            </svg>
                                        </div>
                                        <div class="ml-4">
                                            <div class="text-sm font-medium text-gray-900">@producto.Name</div>
                                            @if (producto.RequiereVencimiento)
                                            {
                                                <div class="text-sm text-gray-500">Requiere vencimiento</div>
                                            }
                                        </div>
                                    </div>
                                </td>
                               
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-gray-100 text-gray-800">
                                        @(producto.Categoria?.nombre ?? "Sin categoría")
                                    </span>
                                </td>
                                
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center justify-between">
                                        <div>
                                            <span class="text-sm font-medium text-gray-900">@GetStockQuantity(producto) unidad@(GetStockQuantity(producto) != 1 ? "es" : "")</span>
                                            <span class="ml-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium @GetStockBadgeClass(producto)">
                                                @GetStockLevel(producto)
                                            </span>
                                        </div>
                                        @if (producto.RequiereVencimiento)
                                        {
                                            <p>Mostrar Lotes</p>
                                            <button @onclick="() => ToggleExpansion(producto.Id)" class="ml-2 p-1 hover:bg-gray-100 rounded transition-colors duration-150">
                                                <svg class="w-4 h-4 text-gray-500 transform transition-transform duration-150 @(expandedRows.Contains(producto.Id) ? "rotate-180" : "")" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
                                                </svg>
                                            </button>
                                        }
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        <span class="text-sm text-gray-900">@producto.Stock.CantidadReservada</span>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap">
                                    <div class="flex items-center">
                                        
                                        <span class="text-sm text-gray-900">@GetLotesCount(producto)</span>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                    <div class="flex items-center space-x-2">
                                        <button @onclick="()=>GoToCreateMovementProduct(producto.Id)" class="inline-flex items-center px-3 py-2 border border-gray-300 shadow-sm text-sm leading-4 font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                                            <svg class="w-5 h-5 mr-2 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2">
                                                <!-- Gear Circle -->
                                                <path stroke-linecap="round" stroke-linejoin="round" d="M12 15a3 3 0 100-6 3 3 0 000 6z" />
                                                <!-- Gear Spokes -->
                                                <path stroke-linecap="round" stroke-linejoin="round" d="M19.4 15a1.65 1.65 0 00.33 1.82l.06.06a2 2 0 01-2.83 2.83l-.06-.06a1.65 1.65 0 00-1.82-.33 1.65 1.65 0 00-1 1.51V21a2 2 0 01-4 0v-.09a1.65 1.65 0 00-1-1.51 1.65 1.65 0 00-1.82.33l-.06.06a2 2 0 01-2.83-2.83l.06-.06a1.65 1.65 0 00.33-1.82 1.65 1.65 0 00-1.51-1H3a2 2 0 010-4h.09a1.65 1.65 0 001.51-1 1.65 1.65 0 00-.33-1.82l-.06-.06a2 2 0 012.83-2.83l.06.06a1.65 1.65 0 001.82.33H9a1.65 1.65 0 001-1.51V3a2 2 0 014 0v.09a1.65 1.65 0 001 1.51 1.65 1.65 0 001.82-.33l.06-.06a2 2 0 012.83 2.83l-.06.06a1.65 1.65 0 00-.33 1.82V9a1.65 1.65 0 001.51 1H21a2 2 0 010 4h-.09a1.65 1.65 0 00-1.51 1z" />
                                            </svg>
                                            Modificar Stock
                                        </button>
                                    </div>
                                </td>
                            </tr>
                            @if (expandedRows.Contains(producto.Id) && producto.RequiereVencimiento)
                            {
                                <tr class="bg-gray-50">
                                    <td colspan="7" class="px-6 py-4">
                                        <div class="bg-white rounded-lg border border-gray-200 p-4">
                                            <h4 class="text-sm font-medium text-gray-900 mb-3">Lotes con Vencimiento</h4>
                                            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">

                                                @foreach (var lote in producto.Lotes)
                                                {
                                                    var days = (lote.FechaVencimiento.ToDateTime(TimeOnly.MinValue) - DateTime.Now).TotalDays;

                                                    <div class="border border-gray-200 rounded-lg p-3">
                                                        <div class="flex justify-between items-start mb-2">
                                                            <span class="text-sm font-medium text-gray-900">Lote: @lote.Id</span> <!-- Or another identifier -->
                                                            <span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium
                                @(days <= 0 ? "bg-red-100 text-red-800" : days <= 3 ? "bg-yellow-100 text-yellow-800" : "bg-green-100 text-green-800")">
                                                                @(days <= 0 ? "Próximo a vencer" : days <= 3 ? "Vence pronto" : "Vigente")
                                                            </span>
                                                        </div>
                                                        <div class="space-y-1">
                                                            <div class="text-xs text-gray-600">Cantidad Recibida: @(lote.CantidadRecibida) unidades</div>
                                                            <div class="text-xs text-gray-600">Cantidad Restante: @(lote.CantidadRestante) unidades</div>
                                                            <div class="text-xs text-gray-600">Vencimiento: @lote.FechaVencimiento.ToString("dd/MM/yyyy")</div>
                                                        </div>
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </td>
                                </tr>
                            }
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="p-12 text-center">
                <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                </svg>
                <h3 class="mt-2 text-sm font-medium text-gray-900">Cargando inventario...</h3>
                <p class="mt-1 text-sm text-gray-500">Por favor espera mientras cargamos los productos.</p>
            </div>
        }
    </div>
</div>

@code {
    private List<Producto>? productos;
    private List<Producto>? filteredProductos;
    private List<string>? categorias;
    private HashSet<int> expandedRows = new();
    private bool showHistoryModal = false;
    private bool showAddMovementModal = false;

    private string searchTerm = string.Empty;
    private string selectedCategory = string.Empty;
    private string selectedStockLevel = string.Empty;

    private string GetInitials(string name)
    {
        if (string.IsNullOrEmpty(name)) return "P";
        var words = name.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (words.Length >= 2)
            return $"{words[0][0]}{words[1][0]}".ToUpper();
        return name[0].ToString().ToUpper();
    }

    

    private int GetStockQuantity(Producto producto)
    {
        return producto.Stock?.CantidadDisponible ?? 0;
    }

    private string GetStockLevel(Producto producto)
    {
        var stock = GetStockQuantity(producto);
        if (stock == 0) return "Sin stock";
        if (stock < 20) return "Bajo";
        return "Alto";
    }

    private string GetStockBadgeClass(Producto producto)
    {
        var stock = GetStockQuantity(producto);
        if (stock == 0) return "bg-red-100 text-red-800";
        if (stock < producto.UmbralInventario) return "bg-yellow-100 text-yellow-800";
        return "bg-green-100 text-green-800";
    }

    private void ToggleExpansion(int productoId)
    {
        if (expandedRows.Contains(productoId))
            expandedRows.Remove(productoId);
        else
            expandedRows.Add(productoId);
    }

    private void GoToHistory()
    {
        NavigationManager.NavigateTo("/inventario/historial");
    }

    private void GoToCreateMovementProduct(int productId)
    {
        NavigationManager.NavigateTo($"/inventario/create?productoId={productId}");
    }

    private void GoToCreateMovement()
    {
        NavigationManager.NavigateTo("/inventario/create");
    }

    private void ToggleAddMovementModal()
    {
        showAddMovementModal = !showAddMovementModal;
    }

    private void ShowProductActions(Producto producto)
    {
        // Implementar menú de acciones del producto
    }

    private void OnSearchChanged(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        FilterProducts();
    }

    private void OnFilterChanged()
    {
        FilterProducts();
    }

    private void FilterProducts()
    {
        if (productos == null)
        {
            filteredProductos = null;
            return;
        }

        var filtered = productos.AsEnumerable();

        if (!string.IsNullOrEmpty(searchTerm))
        {
            filtered = filtered.Where(p => p.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        if (!string.IsNullOrEmpty(selectedCategory))
        {
            filtered = filtered.Where(p => p.Categoria?.nombre == selectedCategory);
        }

        if (!string.IsNullOrEmpty(selectedStockLevel))
        {
            filtered = selectedStockLevel switch
            {
                "low" => filtered.Where(p => GetStockQuantity(p) > 0 && GetStockQuantity(p) < 20),
                "high" => filtered.Where(p => GetStockQuantity(p) >= 20),
                "out" => filtered.Where(p => GetStockQuantity(p) == 0),
                _ => filtered
            };
        }

        filteredProductos = filtered.ToList();
    }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();

        productos = await context.Producto
            .Include(p => p.Categoria)
            .Include(p => p.Stock)
            .Include(p => p.Lotes.Where(l => l.Activo || l.CantidadRestante > 0))
            .ToListAsync();

        categorias = productos
            .Where(p => p.Categoria != null)
            .Select(p => p.Categoria!.nombre)
            .Distinct()
            .OrderBy(c => c)
            .ToList();

        FilterProducts();
    }

    private string GetLotesCount(Producto producto)
    {
        return producto.RequiereVencimiento ? producto.Lotes.Count.ToString() : "-";
    }

    public ValueTask DisposeAsync() => ValueTask.CompletedTask;
}