@page "/catalogo/categorias/delete"
@using Microsoft.EntityFrameworkCore
@using TiendaLaModerna.Components.Models.Catalogo
@inject IDbContextFactory<TiendaLaModerna.Data.TiendaLaModernaContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>CatalogoCategorias</h2>
    <hr />
    @if (catalogocategorias is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">nombre</dt>
            <dd class="col-sm-10">@catalogocategorias.nombre</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">img</dt>
            <dd class="col-sm-10">@catalogocategorias.img</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">activo</dt>
            <dd class="col-sm-10">@catalogocategorias.activo</dd>
        </dl>
        <EditForm method="post" Model="catalogocategorias" OnValidSubmit="DeleteCatalogoCategorias" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(catalogocategorias is null)">Delete</button> |
            <a href="/catalogocategorias">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private CatalogoCategorias? catalogocategorias;

    [SupplyParameterFromQuery]
    private int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        catalogocategorias = await context.CatalogoCategorias.FirstOrDefaultAsync(m => m.id == id);

        if (catalogocategorias is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteCatalogoCategorias()
    {
        using var context = DbFactory.CreateDbContext();
        context.CatalogoCategorias.Remove(catalogocategorias!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/catalogo/categorias");
    }
}
